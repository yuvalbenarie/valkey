import collections
import json
import traceback
import typing

import jsonschema

from . import base_req_res_file_processor
from .. import line_tracking_stream_mixin
from .. import redis_request
from .. import redis_response

try:
    from jsonschema import Draft201909Validator as schema_validator
except ImportError:
    from jsonschema import Draft7Validator as schema_validator


class CommandCounterProcessor(base_req_res_file_processor.BaseReqResFileProcessor):
    def __init__(self, docs: typing.Dict[str, typing.Any], ignored_commands: typing.Set[str], *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._docs = docs
        self._ignored_commands = ignored_commands
        self._command_counter: typing.Dict[str, int] = collections.defaultdict(int)

    def process(self) -> None:
        """
        This function processes a single file generated by logreqres.c and extracts the commands in it and their count.
        """
        print(f"Processing {self.path} ...")
        with line_tracking_stream_mixin.LineTrackingStringIO(self.read_file()) as stream:
            while True:
                try:
                    req = redis_request.RedisRequest.from_file(stream=stream, docs=self._docs)
                    if not req.argv:
                        # EOF
                        break
                    res = redis_response.RedisResponse.from_file(stream=stream)
                except json.decoder.JSONDecodeError as err:
                    print(f"JSON decoder error while processing {self.path}:{stream.lines_read}: {err}")
                    print(traceback.format_exc())
                    raise
                except Exception as err:
                    print(f"General error while processing {self.path}:{stream.lines_read}: {err}")
                    print(traceback.format_exc())
                    raise

                if not req.command:
                    # Unknown command
                    continue

                self._command_counter[req.command] += 1

                if res.error or res.queued:
                    continue

                if req.command not in self._ignored_commands:
                    self._validate_schema(request=req, response=res)

    def _validate_schema(self, request: redis_request.RedisRequest, response: redis_response.RedisResponse) -> None:
        try:
            jsonschema.validate(instance=response.json_obj, schema=request.schema, cls=schema_validator)
        except (jsonschema.ValidationError, jsonschema.exceptions.SchemaError) as err:
            print(f"JSON schema validation error on {self.path}: {err}")
            print(f"argv: {request.argv}")
            try:
                print(f"Response: {response}")
            except UnicodeDecodeError as err:
                print("Response: (unprintable)")
            print(f"Schema: {json.dumps(request.schema, indent=2)}")
            print(traceback.format_exc())
            raise

    def _get_results(self) -> typing.Dict[str, int]:
        return self._command_counter
