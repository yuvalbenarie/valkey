import dataclasses
import io
import json
import typing


@dataclasses.dataclass(frozen=True)
class RedisRequest:
    """
    This class represents a Redis request (AKA command, argv)
    """
    command: typing.Optional[str]
    schema: typing.Optional[typing.Dict[str, typing.Any]]
    argv: typing.Sequence[str]

    @classmethod
    def from_file(cls, stream: io.TextIOBase, docs: typing.Dict[str, typing.Any]) -> "RedisRequest":
        """
        Read lines from `stream` (generated by logreqres.c) and populates the argv array
        """
        argv = cls._read_argv(stream)
        if not argv:
            return cls(command=None, schema=None, argv=argv)

        command = argv[0].lower()
        doc = docs.get(command, {})
        if not doc and len(argv) > 1:
            command = f"{command}|{argv[1].lower()}"
            doc = docs.get(command, {})

        if not doc:
            return cls(command=None, schema=None, argv=argv)
        return cls(command=command, schema=doc.get("reply_schema"), argv=argv)

    @classmethod
    def _read_argv(cls, stream: io.TextIOBase) -> typing.List[str]:
        argv = []
        while True:
            line = cls._readline(stream)
            if not line:
                return argv

            length = int(line)
            arg = stream.read(length)
            cls._readline(stream)  # read remaining \r\n after arg

            if arg == "__argv_end__":
                return argv

            argv.append(arg)

    @staticmethod
    def _readline(stream: io.TextIOBase) -> str:
        # RESP3 lines always end with \r\n
        return stream.readline()[:-2]

    def __str__(self):
        return json.dumps(self.argv)

